services:
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.137.0
    ports:
      - "4317:4317" # gRPC
      - "4318:4318" # HTTP
    depends_on:
      - loki
      - tempo
      - prometheus
    restart: unless-stopped
    volumes:
      - ./otel-config.yaml:/etc/otelcol-contrib/config.yaml:ro
    environment:
      - OTEL_LOG_LEVEL=info
    networks:
      - rage

  loki:
    image: grafana/loki:3.5.7
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - rage

  tempo:
    image: grafana/tempo:2.9.0
    command: ["-config.file=/etc/tempo.yaml"]
    user: "root"
    volumes:
      - ./tempo-config.yaml:/etc/tempo.yaml:ro
      - tempo_data:/tmp/tempo
    ports:
      - "3200:3200" # tempo
      - "4317" # otlp grpc
    networks:
      - rage

  prometheus:
    image: prom/prometheus:v3.6.0
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--enable-feature=exemplar-storage"
    volumes:
      - ./prometheus-config.yaml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - rage

  grafana:
    image: grafana/grafana:11.6.0
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
    ports:
      - 3000:3000/tcp
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: false
          version: 1
          editable: false
        - name: Tempo
          type: tempo
          access: proxy
          orgId: 1
          url: http://tempo:3200
          basicAuth: false
          isDefault: false
          version: 1
          editable: false
          jsonData:
            tracesToLogsV2:
              datasourceUid: 'loki'
              spanStartTimeShift: '-1h'
              spanEndTimeShift: '1h'
              filterByTraceID: true
              filterBySpanID: false
            tracesToMetrics:
              datasourceUid: 'prometheus'
            serviceMap:
              datasourceUid: 'prometheus'
        - name: Prometheus
          type: prometheus
          access: proxy
          orgId: 1
          url: http://prometheus:9090
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
          jsonData:
            exemplarTraceIdDestinations:
              - name: trace_id
                datasourceUid: tempo
        EOF
        /run.sh
    networks:
      - rage

  redis:
    image: redis:8.2.2-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      - REDIS_REPLICATION_MODE=master
    mem_limit: 512m
    mem_reservation: 256m
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    sysctls:
      net.core.somaxconn: 1024
    networks:
      - rage

volumes:
  redis_data:
    driver: local
  tempo_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  rage:
    driver: bridge
